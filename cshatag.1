.\"Generate README file for github: MANWIDTH=80 man ./cshatag.1 > README
.TH CSHATAG 1 "August 2018" "cshatag 0.1" "User Commands"
.SH NAME

cshatag \- shatag in C

.SH SYNOPSIS

cshatag [-h] [-n] [-q] [-v] [-V] FILE [FILE...]

.SH DESCRIPTION

cshatag is a minimal re-implementation in C of shatag
.br
(
.B https://bitbucket.org/maugier/shatag
written in python by Maxime Augier )

cshatag is a tool to detect silent data corruption. It writes the mtime and
the checksum of a file into the file's extended attributes. The filesystem
needs to be mounted with user_xattr enabled for this to work. When run again,
it compares stored mtime and checksum. If it finds that the mtime is unchanged
but the checksum has changed, it will print a warning message.

File statuses are:
.br
	backdated   checksum is wrong and mtime is older than the sha tag
.br
	corrupt     checksum is wrong and mtime matches the sha tag
.br
	invalid     sha tag attributes are corrupt
.br
	new         sha tag attributes have not been set
.br
	ok          checksum is correct
.br
	outdated    checksum is wrong and mtime is newer than the sha tag
.br
                 (the file has been updated since the last run)

cshatag aims to be format-compatible with shatag and uses the same extended
attributes (see the COMPATIBILITY section).

.SH OPTIONS
.TP
.BR \-c ", " \-\^\-check
Check the hashes on all specified files.
.TP
.BR \-f ", " \-\^\-force
Update the stored hashes for backdated, corrupted, or invalid files.
.TP
.BR \-h ", " \-\^\-help
Output a usage message and exit.
.TP
.BR \-n ", " \-\^\-dry-run
Don't update any stored attributes.
.TP
.BR \-q ", " \-\^\-quiet
Only print errors including checksum failures. Can be specified multiple times
to print even fewer messages. This is the opposite of
.B --verbose.
.TP
.BR \-v ", " \-\^\-verbose
Print more verbose messages error and warnings messages. Can be specified
multiple times to print even more messages. This is the opposite of
.B --quiet.
.TP
.BR \-V ", " \-\^\-version
Output version information about
.B cshatag
and exit.

.TP
.BR \-\^\-md5
Use the MD5 hash algorithm (deprecated, not recommended).
.TP
.BR \-\^\-sha1
Use the SHA1 hash algorithm (deprecated, not recommended).
.TP
.BR \-\^\-sha256
Use the SHA256 hash algorithm (default, used by shatag).
.TP
.BR \-\^\-sha512
Use the SHA512 hash algorithm (recommended on 64-bit systems which don't
require shatag compatibility).
.TP
.BR \-\^\-blake2s256
Use the Blake2s hash algorithm.
.TP
.BR \-\^\-blake2b512
Use the Blake2b hash algorithm.

.SH EXAMPLES

Typically, cshatag will be called from find:
.br
# find / -xdev -type f -exec cshatag {} \\; > cshatag.log
.br
Errors like corrupt files will then be printed to stderr or grep for "corrupt"
in cshatag.log.

To remove the extended attributes from all files:
.br
# find / -xdev -type f -exec setfattr -x user.shatag.ts {} \\; -exec setfattr
-x user.shatag.sha256 {} \;

.SH "RETURN VALUE"

0 Success
.br
1 Wrong number of arguments
.br
2 File could not be opened
.br
3 File is not a regular file
.br
4 Extended attributs could not be written to file
.br
5 File is corrupt

.SH COMPATIBILITY

cshatag writes the user.shatag.ts field with full integer
nanosecond precision, while python uses a double for the
whole mtime and loses the last few digits.

.SH AUTHOR
Written by Jakob Unterwurzacher, and Tim Schlueter.

.SH COPYRIGHT
Copyright \(co 2012 Jakob Unterwurzacher.
.br
Copyright \(co 2018 Tim Schlueter.

License GPLv2+: GNU GPL version 2 or later
<https://www.gnu.org/licenses/licenses.html>.

This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

.SH "SEE ALSO"
shatag(1), sha256sum(1), getfattr(1), setfattr(1)

