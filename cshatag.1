.\"Generate README file for github: make README
.TH CSHATAG 1 "September 2018" "cshatag 0.1" "User Commands"
.SH NAME

cshatag \- detect data corruption with checksums in extended attributes.

.SH SYNOPSIS

.B cshatag
[\fI\,OPTION\/\fR]... <\fI\,FILE\/\fR>...

.SH DESCRIPTION

.B cshatag
is a re\-implementation (in C) of
.B shatag,
which helps detect silent data corruption using checksums and extended
attributes.

.B cshatag
writes the last modification time (mtime) and the checksum of a file into the
file's extended attributes.

When run again,
.B cshatag
compares stored mtime and checksum to the file's current mtime and checksum.
It will print the name of each file processed along with its status.

File statuses are:
.RS 5
.TP 12
.BR "backdated"
checksum is wrong and mtime is older than the sha tag
.TP
.BR "corrupt"
checksum is wrong and mtime matches the sha tag
.TP
.BR "invalid"
sha tag attributes are corrupt
.TP
.BR "new"
sha tag attributes have not been set
.TP
.BR "ok"
checksum is correct and the mtime matches
.TP
.BR "hash ok"
checksum is correct and the mtime has changed
.TP
.BR "outdated"
checksum is wrong and mtime is newer than the sha tag
.br
(the file has been updated since the last run)

.RE
.B cshatag
will automatically store the checksums and timestamps for
.B new
files and will update the stored checksums and timestamps for
.B hash ok
and
.B outdated
files (unless
.B \-\^\-dry\-run
is specified).


.B cshatag
will not automatically update the stored checksums and timestamps for
.B backdated,
.B corrupt,
or
.B invalid
files unless
.B \-\^\-force
is specified.

.B cshatag
aims to be format\-compatible with
.B shatag
and uses the same extended attributes (see the
.B COMPATIBILITY
section).

.SH NOTES
Since
.B cshatag
operates using extended attributes, any files specified must be stored on a
filesystem that supports extended user attributes.  Check your filesystem's
documentation for more information.

For ext2/3/4, you may need to mount the filesystem with the
.B user\_xattr
option).

.SH OPTIONS
.SS "POSITIONAL ARGUMENTS"
.TP
.BR FILE
Files to check and hash.

.SS "OPTIONAL ARGUMENTS"
.TP
.BR \-c ", " \-\^\-check
Check the hashes on all specified files.
.br
Without this option,
.B cshatag
assumes all files with the same timestamp are OK without checking their
contents.
.TP
.BR \-f ", " \-\^\-force
Update the stored hashes for backdated, corrupted, or invalid files.
.TP
.BR \-h ", " \-\^\-help
Output a usage message and exit.
.TP
.BR \-n ", " \-\^\-dry\-run
Don't create or update any extended attributes (no on\-disk changes).
This will still read and hash the specified files.
.TP
.BR \-p ", " \-\^\-print
Print the hashes of all specified files in the sha*sum format.
.TP
.BR \-q ", " \-\^\-quiet
Only print errors including checksum failures. Can be specified multiple times
to print even fewer messages. This is the opposite of
.B \-\^\-verbose.
.TP
.BR \-r ", " \-\^\-recursive
Process directories and their contents (not just files).
.TP
.BR \-v ", " \-\^\-verbose
Print more verbose messages error and warnings messages. Can be specified
multiple times to print even more messages. This is the opposite of
.B \-\^\-quiet.
.TP
.BR \-V ", " \-\^\-version
Output version information about
.B cshatag
and exit.

.SS "HASH ALGORITHMS"
.TP
.BR \-\^\-md5
Use the MD5 hash algorithm (not recommended).
.TP
.BR \-\^\-sha1
Use the SHA1 hash algorithm (not recommended).
.TP
.BR \-\^\-sha256
Use the SHA256 hash algorithm (default,
.B shatag
compatible).
.TP
.BR \-\^\-sha512
Use the SHA512 hash algorithm.
.TP
.BR \-\^\-blake2
Use the Blake2b 512\-bit hash algorithm (recommended).

.SH EXAMPLES

Create or update the stored hashes for a file:

.B cshatag example.txt

Verify that a file matches its stored attributes with the blake2 hash algorithm:

.B cshatag \-c \-\^\-blake2 example.txt

Verify all files in a directory, and filter\-out OK file messages:

.B cshatag \-cr /example/ | grep \-v ': OK$'

Print a file's stored sha512 hashes:

.B cshatag \-p \-\^\-sha512 example.txt > example.sha512

This allows you to verify the file's contents with the sha512sum utility
(e.g. after copying the files to another system without shatag installed):

.B sha512sum \-c example.sha512

Copy a file to a different system and verify its contents:

.B rsync \-tX example.txt user@example.com:example.txt
.br
.B ssh user@example.com cshatag \-cn example.txt

Create and update the hashes for all files over 1 MB on the root
filesystem:

.B find / \-xdev \-type f \-size +1M \-print0 | xargs \-r0 cshatag > cshatag.log

To remove the extended attributes from all files:

.B find / \-xdev \-type f \-exec setfattr \-x user.shatag.ts {} \\\;
.B \-exec setfattr \-x user.shatag.sha256 {} \\\;

.SH "EXIT STATUS"

.B 0
Success
.br
.B >0
An error occurred or at least 1 file is backdated, corrupt, or invalid

.SH COMPATIBILITY

.B cshatag
writes the user.shatag.ts field with full nanosecond precision, while python
uses a floating point number for the whole mtime.  As a result, the original
.B shatag
utility is only accurate to within about 200 ns. Because of this,
.B cshatag
treats timestamps within 1 \[mc]s as equal.

The original
.B shatag
utility also only supports the sha256 hash algorithm.

.SH AUTHOR
Written by Jakob Unterwurzacher, and Tim Schlueter.

.SH COPYRIGHT
Copyright \(co 2012 Jakob Unterwurzacher.
.br
Copyright \(co 2018 Tim Schlueter.

License GPLv2+: GNU GPL version 2 or later
<https://www.gnu.org/licenses/licenses.html>.

This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

.SH "SEE ALSO"
shatag(1), sha256sum(1), getfattr(1), setfattr(1)

The original
.B shatag
utility, written in python by Maxime Augier:
.br
.B https://bitbucket.org/maugier/shatag

.SH "AVAILABILITY"

You can obtain the latest version of
.B cshatag
from:
.br
.B https://github.com/modelrockettier/cshatag
